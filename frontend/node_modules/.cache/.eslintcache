[{"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js":"1","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js":"2","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js":"3","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js":"4","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js":"5","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/RegisterForm.js":"6","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useUser.js":"7","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/TopicButton.js":"8"},{"size":251,"mtime":1649140882110,"results":"9","hashOfConfig":"10"},{"size":1182,"mtime":1649140882024,"results":"11","hashOfConfig":"10"},{"size":3701,"mtime":1651382653509,"results":"12","hashOfConfig":"10"},{"size":10798,"mtime":1652165665983,"results":"13","hashOfConfig":"10"},{"size":523,"mtime":1649140882085,"results":"14","hashOfConfig":"10"},{"size":4855,"mtime":1649491390701,"results":"15","hashOfConfig":"10"},{"size":548,"mtime":1649140882109,"results":"16","hashOfConfig":"10"},{"size":1523,"mtime":1652164206556,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vy6rpv",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js",["44"],[],"import \"./App.css\";\nimport ChatInterface from \"./Components/ChatInterface\";\nimport SignInForm from \"./Components/SignInForm\";\nimport RegisterForm from \"./Components/RegisterForm\";\nimport useToken from \"./Components/useToken\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport useUser from \"./Components/useUser\";\n\nfunction App() {\n  const { token, setToken } = useToken();\n  const { signedInUser, setSignedInUser } = useUser();\n\n  return (\n    <div>\n      <Router>\n        <Routes>\n          {!token && token !== \"\" && token !== undefined ? (\n            <>\n              <Route path=\"/\" element={<SignInForm />} />\n              <Route path=\"/register\" element={<RegisterForm />} />\n              <Route path=\"/chat\" element={<SignInForm />} />\n            </>\n          ) : (\n            <>\n              <Route\n                path=\"/chat\"\n                setToken={setToken}\n                setSignedInUser={setSignedInUser}\n                element={<ChatInterface />}\n              />\n              <Route path=\"/\" element={<SignInForm />} />\n            </>\n          )}\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js",["45"],[],"import React from \"react\";\nimport \"./SignInForm.css\";\nimport { Button } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport chatIcon from \"../img/chat-app-icon.png\";\nimport userIcon from \"../img/userIcon.png\";\nimport pwdIcon from \"../img/passwordIcon.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport io from \"socket.io-client\";\n\nconst SignInForm = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordShown, setPasswordShown] = useState(false);\n  const [wrongDetails, setWrongDetails] = useState(false);\n\n  let navigate = useNavigate();\n\n  const togglePasswordVisibility = () => {\n    setPasswordShown(!passwordShown);\n  };\n\n  const socket = io.connect();\n\n\n  const handleClick = () => {\n    const data = {\n      username: username,\n      password: password,\n    };\n\n    axios\n      .post(\"/api/token\", data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        return res;\n      })\n      .then((res) => {\n        localStorage.setItem(\"token\", res.data.access_token);\n        localStorage.setItem(\"user\", username);\n        socket.emit(\"activateUser\", {username: username})\n        navigate(\"/chat\");\n        window.location.reload();\n      })\n      .catch((error) => {\n        console.log(\"There was an error!\", error);\n        setWrongDetails(true);\n      });\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"text-center pa-3\">\n        <img src={chatIcon} className=\"chatIcon\" alt=\"chat-icon\"></img>\n      </div>\n      <div className=\"text-center mt4 name\">Sign in to ChatSpace</div>\n      {wrongDetails ? (\n        <p className=\"text-center mt-4 wrongDetails\">\n          Please enter a valid username and/or password\n        </p>\n      ) : (\n        \"\"\n      )}\n      <form className=\"p-3 mt-3 text-center\">\n        <div className=\"form-field d-flex align-items-center\">\n          {\" \"}\n          <span>\n            {\" \"}\n            <img className=\"userIcon\" alt=\"userIcon\" src={userIcon} />{\" \"}\n          </span>{\" \"}\n          <input\n            type=\"text\"\n            name=\"userName\"\n            id=\"userName\"\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n            value={username}\n          ></input>\n        </div>\n        <div className=\"form-field d-flex align-items-center\">\n          {\" \"}\n          <span>\n            <img className=\"pwdIcon\" alt=\"pwdIcon\" src={pwdIcon} />\n          </span>{\" \"}\n          <input\n            type={passwordShown ? \"text\" : \"password\"}\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            onKeyUp={(e) => {\n              if (e.key === \"Enter\") {\n                handleClick();\n              }\n            }}\n            value={password}\n          ></input>\n          <span className=\"passwordEyeIcon\">\n            <FontAwesomeIcon\n              icon={passwordShown ? faEye : faEyeSlash}\n              onClick={togglePasswordVisibility}\n            />\n          </span>\n        </div>\n        <Button className=\"btn mt-3 p-2 loginBtn\" onClick={handleClick}>\n          Login\n        </Button>\n      </form>\n\n      <div className=\"text-center fs-6 p-3\">\n        {\" \"}\n        Not a member? <a href=\"/register\">Sign Up</a>\n      </div>\n    </div>\n  );\n};\n\nexport default SignInForm;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js",["46","47","48","49","50","51","52","53"],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/RegisterForm.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useUser.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/TopicButton.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":11,"column":11,"nodeType":"56","messageId":"57","endLine":11,"endColumn":23},{"ruleId":"54","severity":1,"message":"58","line":4,"column":20,"nodeType":"56","messageId":"57","endLine":4,"endColumn":29},{"ruleId":"54","severity":1,"message":"59","line":32,"column":10,"nodeType":"56","messageId":"57","endLine":32,"endColumn":22},{"ruleId":"54","severity":1,"message":"60","line":32,"column":24,"nodeType":"56","messageId":"57","endLine":32,"endColumn":39},{"ruleId":"61","severity":1,"message":"62","line":52,"column":23,"nodeType":"63","messageId":"64","endLine":52,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":183,"column":6,"nodeType":"67","endLine":183,"endColumn":20,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":205,"column":6,"nodeType":"67","endLine":205,"endColumn":18,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":232,"column":30,"nodeType":"73","messageId":"74","endLine":232,"endColumn":32},{"ruleId":"65","severity":1,"message":"75","line":254,"column":27,"nodeType":"67","endLine":254,"endColumn":45},{"ruleId":"61","severity":1,"message":"76","line":285,"column":46,"nodeType":"63","messageId":"77","endLine":285,"endColumn":48},"no-unused-vars","'signedInUser' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'clearMessage' is assigned a value but never used.","'setClearMessage' is assigned a value but never used.","array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has missing dependencies: 'currentTopic' and 'newMessageTopic'. Either include them or remove the dependency array.",["79"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Assignments to the 'newMessageTopic' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [currentTopic, getMessages]",{"range":"84","text":"85"},"Update the dependencies array to be: [currentTopic, newMessage, newMessageTopic]",{"range":"86","text":"87"},[4462,4476],"[currentTopic, getMessages]",[4945,4957],"[currentTopic, newMessage, newMessageTopic]"]