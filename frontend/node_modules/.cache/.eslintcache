[{"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js":"1","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js":"2","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js":"3","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js":"4","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js":"5","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/RegisterForm.js":"6","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useUser.js":"7","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/TopicButton.js":"8"},{"size":251,"mtime":1649140882110,"results":"9","hashOfConfig":"10"},{"size":1182,"mtime":1649140882024,"results":"11","hashOfConfig":"10"},{"size":3703,"mtime":1652331690772,"results":"12","hashOfConfig":"10"},{"size":9550,"mtime":1652403210493,"results":"13","hashOfConfig":"10"},{"size":523,"mtime":1649140882085,"results":"14","hashOfConfig":"10"},{"size":4543,"mtime":1652331690766,"results":"15","hashOfConfig":"10"},{"size":548,"mtime":1649140882109,"results":"16","hashOfConfig":"10"},{"size":1265,"mtime":1652331690774,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vy6rpv",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js",["45"],[],"import \"./App.css\";\nimport ChatInterface from \"./Components/ChatInterface\";\nimport SignInForm from \"./Components/SignInForm\";\nimport RegisterForm from \"./Components/RegisterForm\";\nimport useToken from \"./Components/useToken\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport useUser from \"./Components/useUser\";\n\nfunction App() {\n  const { token, setToken } = useToken();\n  const { signedInUser, setSignedInUser } = useUser();\n\n  return (\n    <div>\n      <Router>\n        <Routes>\n          {!token && token !== \"\" && token !== undefined ? (\n            <>\n              <Route path=\"/\" element={<SignInForm />} />\n              <Route path=\"/register\" element={<RegisterForm />} />\n              <Route path=\"/chat\" element={<SignInForm />} />\n            </>\n          ) : (\n            <>\n              <Route\n                path=\"/chat\"\n                setToken={setToken}\n                setSignedInUser={setSignedInUser}\n                element={<ChatInterface />}\n              />\n              <Route path=\"/\" element={<SignInForm />} />\n            </>\n          )}\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js",["46"],[],"import React from \"react\";\nimport \"./SignInForm.css\";\nimport { Button } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport chatIcon from \"../img/chat-app-icon.png\";\nimport userIcon from \"../img/userIcon.png\";\nimport pwdIcon from \"../img/passwordIcon.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport io from \"socket.io-client\";\n\nconst SignInForm = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordShown, setPasswordShown] = useState(false);\n  const [wrongDetails, setWrongDetails] = useState(false);\n\n  let navigate = useNavigate();\n\n  const togglePasswordVisibility = () => {\n    setPasswordShown(!passwordShown);\n  };\n\n  const socket = io.connect();\n\n  const handleClick = () => {\n    const data = {\n      username: username,\n      password: password,\n    };\n\n    axios\n      .post(\"/api/token\", data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        return res;\n      })\n      .then((res) => {\n        localStorage.setItem(\"token\", res.data.access_token);\n        localStorage.setItem(\"user\", username);\n        socket.emit(\"activateUser\", { username: username });\n        navigate(\"/chat\");\n        window.location.reload();\n      })\n      .catch((error) => {\n        console.log(\"There was an error!\", error);\n        setWrongDetails(true);\n      });\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"text-center pa-3\">\n        <img src={chatIcon} className=\"chatIcon\" alt=\"chat-icon\"></img>\n      </div>\n      <div className=\"text-center mt4 name\">Sign in to ChatSpace</div>\n      {wrongDetails ? (\n        <p className=\"text-center mt-4 wrongDetails\">\n          Please enter a valid username and/or password\n        </p>\n      ) : (\n        \"\"\n      )}\n      <form className=\"p-3 mt-3 text-center\">\n        <div className=\"form-field d-flex align-items-center\">\n          {\" \"}\n          <span>\n            {\" \"}\n            <img className=\"userIcon\" alt=\"userIcon\" src={userIcon} />{\" \"}\n          </span>{\" \"}\n          <input\n            type=\"text\"\n            name=\"userName\"\n            id=\"userName\"\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n            value={username}\n          ></input>\n        </div>\n        <div className=\"form-field d-flex align-items-center\">\n          {\" \"}\n          <span>\n            <img className=\"pwdIcon\" alt=\"pwdIcon\" src={pwdIcon} />\n          </span>{\" \"}\n          <input\n            type={passwordShown ? \"text\" : \"password\"}\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            onKeyUp={(e) => {\n              if (e.key === \"Enter\") {\n                handleClick();\n              }\n            }}\n            value={password}\n          ></input>\n          <span className=\"passwordEyeIcon\">\n            <FontAwesomeIcon\n              icon={passwordShown ? faEye : faEyeSlash}\n              onClick={togglePasswordVisibility}\n            />\n          </span>\n        </div>\n        <Button className=\"btn mt-3 p-2 loginBtn\" onClick={handleClick}>\n          Login\n        </Button>\n      </form>\n\n      <div className=\"text-center fs-6 p-3\">\n        {\" \"}\n        Not a member? <a href=\"/register\">Sign Up</a>\n      </div>\n    </div>\n  );\n};\n\nexport default SignInForm;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js",["47","48","49","50","51"],[],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./ChatInterface.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport useToken from \"./useToken\";\nimport useUser from \"./useUser\";\nimport io from \"socket.io-client\";\nimport { DateTime } from \"luxon\";\nimport TopicButton from \"./TopicButton\";\n\nconst ChatInterface = () => {\n  window.setTimeout(function () {\n    let element = document.getElementById(\"chatBox\");\n    element.scrollTop = element.scrollHeight;\n  });\n\n  const [currentTopic, setCurrentTopic] = useState(\"General\");\n\n  const [messages, setMessages] = useState([]);\n\n  const [users, setUsers] = useState([]);\n\n  const { removeToken } = useToken();\n\n  const { signedInUser, signOutUser } = useUser();\n\n  const [activeUsers, setActiveUsers] = useState([]);\n\n  const [message, setMessage] = useState(\"\");\n\n  const [newMessageTopic, setNewMessageTopic] = useState(\"\");\n\n  const [newMessage, setNewMessage] = useState({\n    General: false,\n    Art: false,\n    \"Film & TV\": false,\n    Music: false,\n    Sports: false,\n  });\n\n  let navigate = useNavigate();\n\n  const getUserInfo = (user_id) => {\n    return users.find((user) => user.id === user_id);\n  };\n\n  const selectSignedInUser = (signedInUser) => {\n    let theUserId;\n    users.find((user) => {\n      if (user.username === signedInUser) {\n        theUserId = user.id;\n      }\n    });\n    return theUserId;\n  };\n\n  async function getMessages() {\n    await axios.get(`api/messages/${currentTopic}`).then((res) => {\n      setMessages(res.data);\n    });\n  }\n\n  async function getUsers() {\n    await axios.get(\"api/users\").then((res) => {\n      setUsers(res.data);\n    });\n  }\n\n  async function getActiveUsers() {\n    await axios.get(\"api/activeusers\").then((res) => {\n      setActiveUsers(res.data);\n    });\n  }\n\n  const actives = activeUsers?.map((user) => {\n    return (\n      <table className=\"d-flex text-center justify-content-center align-items-center pb-2\">\n        <td\n          style={\n            user?.username === signedInUser\n              ? { color: \"#ffa861\", fontWeight: \"bold\" }\n              : { color: \"#bafad4\" }\n          }\n        >\n          {user?.username === signedInUser\n            ? user?.username + \" (You)\"\n            : user?.username}\n        </td>\n        <br></br>\n      </table>\n    );\n  });\n\n  const data = messages?.map((message) => {\n    return {\n      ...message,\n      user: getUserInfo(message?.userid),\n    };\n  });\n\n  let userId = selectSignedInUser(signedInUser);\n\n  function dateSuffix(date) {\n    if (date > 3 && date < 21) return `${date}th`;\n    switch (date % 10) {\n      case 1:\n        return `${date}st`;\n      case 2:\n        return `${date}nd`;\n      case 3:\n        return `${date}rd`;\n      default:\n        return `${date}th`;\n    }\n  }\n\n  const convertDate = (date) => {\n    const weekday = DateTime.fromISO(date).toFormat(\"EEEE\");\n    const year = DateTime.fromISO(date).toFormat(\"yyyy\");\n    const day = dateSuffix(DateTime.fromISO(date).toFormat(\"d\"));\n    const month = DateTime.fromISO(date).toFormat(\"MMMM\");\n\n    return `${weekday}, ${month} ${day}, ${year}`;\n  };\n\n\n\n  const databaseSend = () => {\n    let messageBox = document.getElementById(\"messageBox\");\n\n    if (message !== \"\") {\n      socket.emit(\"new_message\", {\n        userId: userId,\n        text: message,\n        topic: currentTopic,\n      });\n    }\n    setMessage(\"\");\n    messageBox.value = \"\";\n  };\n\n  const logOut = () => {\n    axios\n      .post(\"/api/logout\", data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        removeToken();\n        socket.emit(\"deactivateUser\", { username: signedInUser });\n        signOutUser();\n        navigate(\"/\");\n        window.location.reload();\n      })\n      .catch((error) => {\n        console.log(\"An error was caught!\", error);\n      });\n  };\n\n  useEffect(() => {\n    getMessages();\n    getUsers();\n    getActiveUsers();\n  }, [currentTopic]);\n\n  const socket = io.connect();\n\n  useEffect(() => {\n    if (newMessageTopic === currentTopic) {\n      setNewMessage((previousState) => {\n        const newState = { ...previousState, [newMessageTopic]: false };\n        return newState;\n      });\n    }\n    setNewMessageTopic(\"\");\n  }, [newMessageTopic]);\n\n  useEffect(() => {\n    let newSocket = io.connect();\n    socket.on(\"connect\", () => {\n      // console.log(\"Connected...\")\n    });\n    newSocket.on(\"new_message\", (message) => {\n      setMessages((messages) => [...messages, message[0]]);\n\n      setNewMessageTopic(message[0].topic);\n\n      setNewMessage((previousState) => {\n        const newState = { ...previousState, [message[0].topic]: true };\n        return newState;\n      });\n    });\n\n    socket.on(\"activateUser\", () => {\n      getActiveUsers();\n    });\n\n    socket.on(\"deactivateUser\", () => {\n      getActiveUsers();\n    });\n  }, []);\n\n  const formatTime = (utcTime) => {\n    const time = DateTime.fromISO(utcTime).toFormat(\"t\");\n    return time;\n  };\n\n  const filteredData = data.filter((message) => {\n    if (message.topic === currentTopic) {\n      return message;\n    }\n  });\n\n  const theMessages =\n    filteredData &&\n    filteredData.map((message, index) => {\n      let prev = data[index - 1];\n      let current = data[index];\n     \n      return (\n        <div>\n          {convertDate(prev?.time_created) === convertDate(current?.time_created) ? (\n            \"\"\n          ) : (\n            <div>\n              <div className=\"fw-bold mx-auto horizontalLine\"></div>\n              <div className=\"fw-bold mt-4\" style={{ color: \"#444c55\" }}>\n                {convertDate(message?.time_created)}\n              </div>\n            </div>\n          )}\n\n          <div\n            className=\"chat-container\"\n            style={\n              message.user?.username === signedInUser\n                ? { background: \"#e45437\" }\n                : { background: \"\" }\n            }\n            key={index}\n          >\n            <div\n              className=\"card-header d-flex justify-content-between p-3\"\n              style={{ borderBottom: \"1px solid rgba(255, 255, 255, 0.3\" }}\n            >\n              <p className=\"fw-bold mb-0 paddingRight\">\n                {message?.user?.username}\n              </p>\n              <p className=\" small mb-0\">\n                <i>{formatTime(message?.time_created)}</i>\n              </p>\n            </div>\n            <div className=\"card-body\">\n              <p className=\"mb-0 mx-auto p-2\">{message.text}</p>\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n  return (\n    <>\n      <div id=\"container\">\n        <div className=\"text-center mx-auto\" id=\"navbar\">\n          {currentTopic}\n        </div>\n\n        <div className=\"userBox col-3 userText\">\n          <h6 className=\"text-center p-3 mt-2 pb-1\">Active Users</h6>\n          <p className=\"text-center\">{actives}</p>\n\n          <h6 className=\"text-center p-3\">Topics</h6>\n\n          <TopicButton\n            topicName={\"General\"}\n            currentTopic={currentTopic}\n            setCurrentTopic={setCurrentTopic}\n            newMessage={newMessage.General}\n            setNewMessage={setNewMessage}\n          />\n          <TopicButton\n            topicName={\"Art\"}\n            currentTopic={currentTopic}\n            setCurrentTopic={setCurrentTopic}\n            newMessage={newMessage.Art}\n            setNewMessage={setNewMessage}\n          />\n          <TopicButton\n            topicName={\"Film & TV\"}\n            currentTopic={currentTopic}\n            setCurrentTopic={setCurrentTopic}\n            newMessage={newMessage[\"Film & TV\"]}\n            setNewMessage={setNewMessage}\n          />\n          <TopicButton\n            topicName={\"Music\"}\n            currentTopic={currentTopic}\n            setCurrentTopic={setCurrentTopic}\n            newMessage={newMessage.Music}\n            setNewMessage={setNewMessage}\n          />\n          <TopicButton\n            topicName={\"Sports\"}\n            currentTopic={currentTopic}\n            setCurrentTopic={setCurrentTopic}\n            newMessage={newMessage.Sports}\n            setNewMessage={setNewMessage}\n          />\n\n          <Button\n            className=\"p-2 d-flex justify-content-center align-items-center mx-auto mb-4 logoutBtn\"\n            onClick={logOut}\n          >\n            Logout\n          </Button>\n        </div>\n\n        <div className=\"parent\">\n          <div className=\"discussionBox\" id=\"chatBox\">\n            {theMessages}\n          </div>\n\n          <div className=\"flex child\">\n            <div>\n              <div className=\"input-group\">\n                <textarea\n                  id=\"messageBox\"\n                  type=\"text\"\n                  className=\"form-control messageBox\"\n                  rows=\"2\"\n                  cols=\"500\"\n                  onChange={(e) => {\n                    setMessage(e.target.value);\n                  }}\n                  value={message}\n                  placeholder=\"Type Your Message\"\n                  onKeyUp={(e) => {\n                    if (e.key === \"Enter\") {\n                      databaseSend();\n                    }\n                  }}\n                />\n              </div>\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"btn sendBtn\"\n              onClick={databaseSend}\n            >\n              SEND\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatInterface;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/RegisterForm.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useUser.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/TopicButton.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":11,"column":11,"nodeType":"54","messageId":"55","endLine":11,"endColumn":23},{"ruleId":"52","severity":1,"message":"56","line":4,"column":20,"nodeType":"54","messageId":"55","endLine":4,"endColumn":29},{"ruleId":"57","severity":1,"message":"58","line":50,"column":23,"nodeType":"59","messageId":"60","endLine":50,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":167,"column":6,"nodeType":"63","endLine":167,"endColumn":20,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":179,"column":6,"nodeType":"63","endLine":179,"endColumn":23,"suggestions":"66"},{"ruleId":"61","severity":1,"message":"67","line":204,"column":6,"nodeType":"63","endLine":204,"endColumn":8,"suggestions":"68"},{"ruleId":"57","severity":1,"message":"69","line":211,"column":46,"nodeType":"59","messageId":"70","endLine":211,"endColumn":48},"no-unused-vars","'signedInUser' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has a missing dependency: 'currentTopic'. Either include it or remove the dependency array.",["72"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["73"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [currentTopic, getMessages]",{"range":"80","text":"81"},"Update the dependencies array to be: [currentTopic, newMessageTopic]",{"range":"82","text":"83"},"Update the dependencies array to be: [socket]",{"range":"84","text":"85"},[4043,4057],"[currentTopic, getMessages]",[4345,4362],"[currentTopic, newMessageTopic]",[4957,4959],"[socket]"]